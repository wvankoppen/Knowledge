#! /usr/bin/python

# A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. 
# For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
# A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
# As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. 
# By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. 
#However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as 
# the sum of two abundant numbers is less than this limit.
# Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.

# Find a positive integer which cannot be written as the sum of two abundant numbers.
# first abundants: 12, 18, 20, 24, 30, 36, 40, 42, 48, 54, 56, 60, 66, 70, 72, 78, 80, 84, 88, 90, 96, 100, 102, 104, 108, 112, 114, 12

def is_abundant(n):
  return sum(divisors(n)) > n

def divisors(n):
  divisors = []
  for i in range(1, int(n**0.5)+1):
    if (n%i==0):
      divisors.append(i)

  for div in list(divisors):
    if div != n/div:
      divisors.append(n/div)
  divisors.remove(n)
  return divisors

abundanties = []
for i in range(1,28123):
  if is_abundant(i):
    abundanties.append(i)

#print divisors(945)
#print  [elem for elem in abundanties if elem%2!= 0] 
#print len(abundanties)
#print abundanties[:20]

sums = set()
for a1 in abundanties:
  for a2 in abundanties:
    sums.add(a1+a2)


print list(sums)[:50]

total = 0
for i in range(1, 28123):
  if i not in sums:
    total += i

print "Done, sum is %i" % total
	
    

    
